div {
  display: inline-block;
  font-family: sans-serif;
  font-size: 20px;
  margin-left: 25px;
  margin-right: 25px;
  border: 4px solid black;
  line-height: 100px;
  text-align: center;
  width: 200px;
  height: 200px;
}

body {
  margin: 100px auto;
  width: max-content;
  background-color:aliceblue;
}

/* border concerns the outline of the container, it works like a stroke outline to the image because it is inside the container.*/
.styleA {
    border: 4px solid purple;
    box-shadow: 7px 7px 5px red;
}

/* The attribute object-fit: cover; is necessary in order to 'cover' the entirety of the container when div is called, in this case the image will be 'cropped' instead of
being resized with incorrect ratios so it doesn't look squished or stretched.*/
.styleA img {
    width: 200px;
    height: 200px;
    object-fit: cover;
}

.styleB {
    width: 200px;
    height: 200px;
    box-shadow: inset 5px 5px 5px black;
    border: 4px solid rgb(0, 234, 0);
}

/* I added an inset shadow on the container class styleB, and then just move the image back using the property z-index; 
   in order to make it look like the image only has the inset shadow. */
.styleB img {
    width: 200px;
    height: 200px;
    position: relative;
    z-index: -2;
}

.styleC {
  width: 200px;
  height: 200px;
  border: 4px solid orange;
  border-radius: 10px;
}

.styleC img {
  width: 200px;
  height: 200px;
  position: relative;
  z-index: -1;
}

/* one, two, and three ids respectively concern the styling of the third div class which requires multiple outlines.*/
#one {
  width: 200px;
  height: 200px;
  border: 15px solid blue;
  border-radius: 20px;
  position: relative;
  z-index: -2;
  transform: translateX(-278px) translateY(14px);
}

#two {
  width: 210px;
  height: 210px;
  border: 20px solid red;
  border-radius: 27px;
  position: relative;
  z-index: -3;
  transform: translateX(-567px) translateY(24px);
}

#three {
  width: 220px;
  height: 220px;
  border: 25px solid green;
  border-radius: 32px;
  position: relative;
  z-index: -4;
  transform: translateX(-876px) translateY(34px);
}

/* I figured the container class .styleD is different from the added image element, to imitate the layout of divD on the example image was to set a background image for the styleD
   container, this makes it so that the img added to the styleD can be offset, blurred, translucent and like a 'shadow' to the image. */
.styleD {
  background-image: url("Images/walesstreet.jpeg");
  width: 200px;
  height: 200px;
  border: darkred solid 4px;
  position: relative;
  z-index: -1;
  transform: translateX(-880px);
}

.styleD img {
  width: 200px;
  height: 200px;
  opacity: 50%;
  transform: translateX(10px) translateY(10px);
  filter: blur(1px);
}
